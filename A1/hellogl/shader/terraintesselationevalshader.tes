#version 400

layout(quads, equal_spacing) in;
in vec3 tcPosition[];
patch in int maxLogTessLevel;
patch in int logTessLevel;

out vec3 tePosition;
out vec3 teNormal;
out vec2 UV;

uniform mat4 viewMat, projMat;
uniform mat3 normalMat;
uniform usampler2D heightMap;
uniform float heightMapSize;

vec3 calculatePos(vec2 xzCoord) {
    vec2 texCoord = xzCoord/heightMapSize;
    float height = float(textureLod( heightMap, texCoord,  maxLogTessLevel - logTessLevel).r) / 100.0;
    vec3 result = vec3(xzCoord.x, height, xzCoord.y);
    return result;
}

void main() {

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    vec3 p1 = mix(tcPosition[0], tcPosition[1], u);
    vec3 p2 = mix(tcPosition[3], tcPosition[2], u);

    vec3 pos = mix(p1, p2, v);
    vec2 gridPos = vec2(pos.x, pos.z);
    vec3 worldPos = calculatePos(gridPos);
    tePosition = worldPos;

    vec3 neighbourA = calculatePos(gridPos + vec2(1,0));
    vec3 neighbourB = calculatePos(gridPos + vec2(0,1));

    vec3 worldNormal = normalize(-cross(neighbourA - worldPos, neighbourB - worldPos));
    teNormal = worldNormal;

    UV = vec2(worldPos.x, worldPos.z) + vec2(worldPos.y, worldPos.y) / 100.0;

    gl_Position = projMat * viewMat * vec4(tePosition, 1.0);

}
